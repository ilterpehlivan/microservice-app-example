// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: authenticate.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthInterfaceClient is the client API for AuthInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthInterfaceClient interface {
	//given token as parameter if authenticate then return user details
	//otherwise error
	Authenticate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*UserInfo, error)
}

type authInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthInterfaceClient(cc grpc.ClientConnInterface) AuthInterfaceClient {
	return &authInterfaceClient{cc}
}

func (c *authInterfaceClient) Authenticate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/org.ilt.example.auth.AuthInterface/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthInterfaceServer is the server API for AuthInterface service.
// All implementations must embed UnimplementedAuthInterfaceServer
// for forward compatibility
type AuthInterfaceServer interface {
	//given token as parameter if authenticate then return user details
	//otherwise error
	Authenticate(context.Context, *wrapperspb.StringValue) (*UserInfo, error)
	mustEmbedUnimplementedAuthInterfaceServer()
}

// UnimplementedAuthInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthInterfaceServer struct {
}

func (UnimplementedAuthInterfaceServer) Authenticate(context.Context, *wrapperspb.StringValue) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthInterfaceServer) mustEmbedUnimplementedAuthInterfaceServer() {}

// UnsafeAuthInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthInterfaceServer will
// result in compilation errors.
type UnsafeAuthInterfaceServer interface {
	mustEmbedUnimplementedAuthInterfaceServer()
}

func RegisterAuthInterfaceServer(s grpc.ServiceRegistrar, srv AuthInterfaceServer) {
	s.RegisterService(&AuthInterface_ServiceDesc, srv)
}

func _AuthInterface_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInterfaceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.ilt.example.auth.AuthInterface/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInterfaceServer).Authenticate(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthInterface_ServiceDesc is the grpc.ServiceDesc for AuthInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.ilt.example.auth.AuthInterface",
	HandlerType: (*AuthInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthInterface_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authenticate.proto",
}
